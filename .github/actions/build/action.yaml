name: "Build Solana Program"
description: "Builds and optionally deploys a Solana program"

inputs:
  program:
    description: "Program to build"
    required: true
  network:
    description: "Target network (devnet/mainnet)"
    required: false
    default: "devnet"
  deploy:
    description: "Deploy program after build"
    required: false
    default: "false"
  upload_idl:
    description: "Upload IDL after build"
    required: false
    default: "true"
  verify:
    description: "Verify build on-chain using solana-verify"
    required: false
    default: "true"
  use-squads:
    description: "Use Squads multisig for deployment"
    required: false
    default: "false"
  priority-fee:
    description: "Priority fee in microlamports"
    required: false
    default: "100000"
  features:
    description: "Cargo features to enable during build"
    required: false
    default: ""
  vault-index:
    description: "Index of the vault to use for the multisig"
    required: false
    default: "0"
  MAINNET_SOLANA_DEPLOY_URL:
    description: "Mainnet RPC URL for deployment"
    required: false
  DEVNET_SOLANA_DEPLOY_URL:
    description: "Devnet RPC URL for deployment"
    required: false
  MAINNET_DEPLOYER_KEYPAIR:
    description: "Base58 encoded keypair for mainnet deployment"
    required: false
  DEVNET_DEPLOYER_KEYPAIR:
    description: "Base58 encoded keypair for devnet deployment"
    required: false
  MAINNET_MULTISIG:
    description: "Mainnet Squads multisig address"
    required: false
  MAINNET_MULTISIG_VAULT:
    description: "Mainnet Squads multisig vault address"
    required: false
  DEVNET_MULTISIG:
    description: "Devnet Squads multisig address"
    required: false
  DEVNET_MULTISIG_VAULT:
    description: "Devnet Squads multisig vault address"
    required: false

outputs:
  buffer:
    description: "Program buffer address"
    value: ${{ steps.program-buffer.outputs.buffer }}
  idl_buffer:
    description: "IDL buffer address"
    value: ${{ steps.idl-buffer.outputs.buffer }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Check for Anchor.toml
      id: check-anchor
      shell: bash
      run: |
        if [ -f "Anchor.toml" ]; then
          echo "is_anchor=true" >> $GITHUB_OUTPUT
          echo "Anchor.toml found - this is an Anchor project"
        else
          echo "is_anchor=false" >> $GITHUB_OUTPUT
          echo "No Anchor.toml found - this is not an Anchor project"
        fi

    - name: Set deployment variables
      shell: bash
      run: |
        # Set URLs and Keys based on network
        if [ "${{ inputs.network }}" = "mainnet" ]; then
          echo "DEPLOY_URL=${{ inputs.MAINNET_SOLANA_DEPLOY_URL }}" >> $GITHUB_ENV
          echo "DEPLOYER_KEYPAIR=${{ inputs.MAINNET_DEPLOYER_KEYPAIR }}" >> $GITHUB_ENV
          echo "MULTISIG=${{ inputs.MAINNET_MULTISIG }}" >> $GITHUB_ENV
          echo "MULTISIG_VAULT=${{ inputs.MAINNET_MULTISIG_VAULT }}" >> $GITHUB_ENV
        else
          echo "DEPLOY_URL=${{ inputs.DEVNET_SOLANA_DEPLOY_URL }}" >> $GITHUB_ENV
          echo "DEPLOYER_KEYPAIR=${{ inputs.DEVNET_DEPLOYER_KEYPAIR }}" >> $GITHUB_ENV
          echo "MULTISIG=${{ inputs.DEVNET_MULTISIG }}" >> $GITHUB_ENV
          echo "MULTISIG_VAULT=${{ inputs.DEVNET_MULTISIG_VAULT }}" >> $GITHUB_ENV
        fi

        # Extract deployer address from keypair
        if [ -n "$DEPLOYER_KEYPAIR" ]; then
          echo "$DEPLOYER_KEYPAIR" > deployer-keypair.json
          DEPLOYER_ADDRESS=$(solana-keygen pubkey deployer-keypair.json)
          echo "DEPLOYER_ADDRESS=$DEPLOYER_ADDRESS" >> $GITHUB_ENV
          rm deployer-keypair.json
        fi

    - name: Extract Versions
      uses: ./extract-versions

    - name: Setup Environment
      uses: ./setup

    - name: Debug Environment Before Setup
      shell: bash
      run: |
        echo "=== Environment Variables Before Setup ==="
        env | grep -E "SOLANA|ANCHOR"
        echo "==========================="

    - name: Install Solana
      uses: ./setup-solana

    - name: Install Anchor
      uses: ./setup-anchor
      if: steps.check-anchor.outputs.is_anchor == 'true'

    - name: Set Program Variables from Anchor.toml
      if: steps.check-anchor.outputs.is_anchor == 'true'
      shell: bash
      run: |
        PROGRAM="${{ inputs.program }}"
        PROGRAM_NAME=${PROGRAM//-/_}
        echo "Looking for program ${PROGRAM_NAME} in Anchor.toml"
        PROGRAM_ID=$(~/.cargo/bin/toml get ./Anchor.toml programs.localnet.${PROGRAM_NAME} | tr -d '"')
        echo "Program: $PROGRAM_ID"
        echo "PROGRAM_NAME=${PROGRAM_NAME}" >> $GITHUB_ENV
        echo "PROGRAM_ID=${PROGRAM_ID}" >> $GITHUB_ENV

    - name: Set Program Variables from Cargo.toml
      if: steps.check-anchor.outputs.is_anchor == 'false'
      shell: bash
      run: |
        PROGRAM="${{ inputs.program }}"
        if [ -f "Cargo.toml" ]; then
          LIB_NAME=$(grep -A1 '^\[lib\]' Cargo.toml | grep 'name' | sed 's/.*= *"\(.*\)".*/\1/')
          if [ -z "$LIB_NAME" ]; then
            LIB_NAME=$(grep -A1 '^\[package\]' Cargo.toml | grep 'name' | sed 's/.*= *"\(.*\)".*/\1/')
          fi
        else
          LIB_NAME="$PROGRAM"
        fi
        echo "PROGRAM_NAME=${LIB_NAME}" >> $GITHUB_ENV

    - name: Build Anchor
      uses: ./build-anchor
      if: steps.check-anchor.outputs.is_anchor == 'true'
      with:
        testing: false
        devnet: ${{ inputs.network == 'devnet' }}
        program: ${{ env.PROGRAM_NAME }}

    - name: Build Verified
      uses: ./build-verified
      id: build-verified
      with:
        verify-version: ${{ env.SOLANA_VERIFY_VERSION }}
        devnet: ${{ inputs.network == 'devnet' }}
        program: ${{ env.PROGRAM_NAME }}
        program-id: ${{ env.PROGRAM_ID }}
        features: ${{ inputs.features }}

    - name: Write Program Buffer
      uses: ./write-program-buffer
      id: program-buffer
      if: inputs.deploy == 'true'
      with:
        program-id: ${{ env.PROGRAM_ID }}
        program: ${{ env.PROGRAM_NAME }}
        rpc-url: ${{ env.DEPLOY_URL }}
        keypair: ${{ env.DEPLOYER_KEYPAIR }}
        buffer-authority-address: ${{ inputs.use-squads == 'true' && env.MULTISIG_VAULT || env.DEPLOYER_ADDRESS }}
        priority-fee: ${{ inputs.priority-fee }}

    - name: Write IDL Buffer
      uses: ./write-idl-buffer
      id: idl-buffer
      if: inputs.upload_idl == 'true'
      with:
        program-id: ${{ env.PROGRAM_ID }}
        program: ${{ env.PROGRAM_NAME }}
        rpc-url: ${{ env.DEPLOY_URL }}
        keypair: ${{ env.DEPLOYER_KEYPAIR }}
        idl-authority: ${{ inputs.use-squads == 'true' && env.MULTISIG_VAULT || env.DEPLOYER_ADDRESS }}

    - name: Verify Build
      uses: ./verify-build
      id: verify-build
      if: inputs.verify == 'true'
      with:
        verify-version: ${{ env.SOLANA_VERIFY_VERSION }}
        program-id: ${{ env.PROGRAM_ID }}
        program: ${{ env.PROGRAM_NAME }}
        network: ${{ inputs.network }}
        rpc-url: ${{ env.DEPLOY_URL }}
        keypair: ${{ env.DEPLOYER_KEYPAIR }}
        use-squads: ${{ inputs.use-squads }}
        vault-address: ${{ env.MULTISIG_VAULT }}

    - name: Create local artifacts directory
      shell: bash
      run: |
        mkdir -p build-artifacts/so
        mkdir -p build-artifacts/idl
        cp -v ./target/deploy/${{ env.PROGRAM_NAME }}.so build-artifacts/so/
        if [ -f "./target/idl/${{ env.PROGRAM_NAME }}.json" ]; then
          cp -v ./target/idl/${{ env.PROGRAM_NAME }}.json build-artifacts/idl/
        fi
        chmod -R 777 build-artifacts/

    - name: Store so files
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROGRAM_NAME }}-so
        path: |
          ./target/deploy/${{ env.PROGRAM_NAME }}.so

    - name: Store idl files
      if: ${{ !env.ACT && hashFiles(format('./target/idl/{0}.json', env.PROGRAM_NAME)) != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROGRAM_NAME }}-idl
        path: |
          ./target/idl/${{ env.PROGRAM_NAME }}.json

    - name: Create squads program upgrade transaction
      if: inputs.deploy == 'true' && inputs.use-squads == 'true'
      uses: Woody4618/squads-program-action@main
      with:
        rpc: ${{ env.DEPLOY_URL }}
        program: ${{ env.PROGRAM_ID }}
        buffer: ${{ steps.program-buffer.outputs.buffer }}
        idl-buffer: ${{ steps.idl-buffer.outputs.buffer }}
        multisig: ${{ env.MULTISIG }}
        keypair: ${{ env.DEPLOYER_KEYPAIR }}
        priority-fee: ${{ inputs.priority-fee }}
        vault-index: ${{ inputs.vault-index }}
        pda-tx: ${{ steps.verify-build.outputs.pda_tx }} 